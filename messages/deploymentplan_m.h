//
// Generated file, do not edit! Created by opp_msgtool 6.1 from messages/deploymentplan.msg.
//

#ifndef __DEPLOYMENTPLAN_M_H
#define __DEPLOYMENTPLAN_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class VnfBlueprint;
class VnfDeploymentPlan;
#include "vnftype_m.h" // import vnftype

/**
 * Class generated from <tt>messages/deploymentplan.msg:2</tt> by opp_msgtool.
 * <pre>
 * packet VnfBlueprint
 * {
 *     string vnfName;
 *     VnfType vnfType;
 *     double cpu;
 *     double memory;
 *     double bandwidth;
 * 
 * }
 * </pre>
 */
class VnfBlueprint : public ::omnetpp::cPacket
{
  protected:
    omnetpp::opp_string vnfName;
    VnfType vnfType = static_cast<VnfType>(-1);
    double cpu = 0;
    double memory = 0;
    double bandwidth = 0;

  private:
    void copy(const VnfBlueprint& other);

  protected:
    bool operator==(const VnfBlueprint&) = delete;

  public:
    VnfBlueprint(const char *name=nullptr, short kind=0);
    VnfBlueprint(const VnfBlueprint& other);
    virtual ~VnfBlueprint();
    VnfBlueprint& operator=(const VnfBlueprint& other);
    virtual VnfBlueprint *dup() const override {return new VnfBlueprint(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getVnfName() const;
    virtual void setVnfName(const char * vnfName);

    virtual VnfType getVnfType() const;
    virtual void setVnfType(VnfType vnfType);

    virtual double getCpu() const;
    virtual void setCpu(double cpu);

    virtual double getMemory() const;
    virtual void setMemory(double memory);

    virtual double getBandwidth() const;
    virtual void setBandwidth(double bandwidth);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VnfBlueprint& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VnfBlueprint& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>messages/deploymentplan.msg:11</tt> by opp_msgtool.
 * <pre>
 * packet VnfDeploymentPlan
 * {
 *     int enterpriseId;
 *     int nfviNodeId;
 *     VnfBlueprint blueprints[];  // array of VNF configs
 * }
 * </pre>
 */
class VnfDeploymentPlan : public ::omnetpp::cPacket
{
  protected:
    int enterpriseId = 0;
    int nfviNodeId = 0;
    VnfBlueprint *blueprints = nullptr;
    size_t blueprints_arraysize = 0;

  private:
    void copy(const VnfDeploymentPlan& other);

  protected:
    bool operator==(const VnfDeploymentPlan&) = delete;

  public:
    VnfDeploymentPlan(const char *name=nullptr, short kind=0);
    VnfDeploymentPlan(const VnfDeploymentPlan& other);
    virtual ~VnfDeploymentPlan();
    VnfDeploymentPlan& operator=(const VnfDeploymentPlan& other);
    virtual VnfDeploymentPlan *dup() const override {return new VnfDeploymentPlan(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getEnterpriseId() const;
    virtual void setEnterpriseId(int enterpriseId);

    virtual int getNfviNodeId() const;
    virtual void setNfviNodeId(int nfviNodeId);

    virtual void setBlueprintsArraySize(size_t size);
    virtual size_t getBlueprintsArraySize() const;
    virtual const VnfBlueprint& getBlueprints(size_t k) const;
    virtual VnfBlueprint& getBlueprintsForUpdate(size_t k) { return const_cast<VnfBlueprint&>(const_cast<VnfDeploymentPlan*>(this)->getBlueprints(k));}
    virtual void setBlueprints(size_t k, const VnfBlueprint& blueprints);
    virtual void insertBlueprints(size_t k, const VnfBlueprint& blueprints);
    [[deprecated]] void insertBlueprints(const VnfBlueprint& blueprints) {appendBlueprints(blueprints);}
    virtual void appendBlueprints(const VnfBlueprint& blueprints);
    virtual void eraseBlueprints(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VnfDeploymentPlan& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VnfDeploymentPlan& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline VnfBlueprint *fromAnyPtr(any_ptr ptr) { return check_and_cast<VnfBlueprint*>(ptr.get<cObject>()); }
template<> inline VnfDeploymentPlan *fromAnyPtr(any_ptr ptr) { return check_and_cast<VnfDeploymentPlan*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __DEPLOYMENTPLAN_M_H

