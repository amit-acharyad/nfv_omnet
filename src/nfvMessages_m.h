//
// Generated file, do not edit! Created by opp_msgtool 6.1 from nfvMessages.msg.
//

#ifndef __NFVMESSAGES_M_H
#define __NFVMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class NfvMessage;
class VnfDeploymentRequest;
class VnfDeploymentResponse;
/**
 * Class generated from <tt>nfvMessages.msg:15</tt> by opp_msgtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * packet NfvMessage
 * {
 * }
 * </pre>
 */
class NfvMessage : public ::omnetpp::cPacket
{
  protected:

  private:
    void copy(const NfvMessage& other);

  protected:
    bool operator==(const NfvMessage&) = delete;

  public:
    NfvMessage(const char *name=nullptr, short kind=0);
    NfvMessage(const NfvMessage& other);
    virtual ~NfvMessage();
    NfvMessage& operator=(const NfvMessage& other);
    virtual NfvMessage *dup() const override {return new NfvMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NfvMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NfvMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nfvMessages.msg:17</tt> by opp_msgtool.
 * <pre>
 * packet VnfDeploymentRequest extends NfvMessage
 * {
 *     string vnfType; //eg. firewall loadbalancer
 *     double requiredCpu;
 *     double requiredMemory;
 *     double requiredBandwidth;
 *     int requestId; // unique id for this deployment
 * }
 * </pre>
 */
class VnfDeploymentRequest : public ::NfvMessage
{
  protected:
    omnetpp::opp_string vnfType;
    double requiredCpu = 0;
    double requiredMemory = 0;
    double requiredBandwidth = 0;
    int requestId = 0;

  private:
    void copy(const VnfDeploymentRequest& other);

  protected:
    bool operator==(const VnfDeploymentRequest&) = delete;

  public:
    VnfDeploymentRequest(const char *name=nullptr, short kind=0);
    VnfDeploymentRequest(const VnfDeploymentRequest& other);
    virtual ~VnfDeploymentRequest();
    VnfDeploymentRequest& operator=(const VnfDeploymentRequest& other);
    virtual VnfDeploymentRequest *dup() const override {return new VnfDeploymentRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getVnfType() const;
    virtual void setVnfType(const char * vnfType);

    virtual double getRequiredCpu() const;
    virtual void setRequiredCpu(double requiredCpu);

    virtual double getRequiredMemory() const;
    virtual void setRequiredMemory(double requiredMemory);

    virtual double getRequiredBandwidth() const;
    virtual void setRequiredBandwidth(double requiredBandwidth);

    virtual int getRequestId() const;
    virtual void setRequestId(int requestId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VnfDeploymentRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VnfDeploymentRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nfvMessages.msg:25</tt> by opp_msgtool.
 * <pre>
 * packet VnfDeploymentResponse extends NfvMessage
 * {
 *     int requestId; // reference to original request
 *     bool success;
 *     string deploymentId; //unique id of deployed Vnf instance
 *     string errorMessage; //reason for failure (if not successful)
 *     int nfviNodeId; // Id of the nfvi node that responded
 * 
 * }
 * </pre>
 */
class VnfDeploymentResponse : public ::NfvMessage
{
  protected:
    int requestId = 0;
    bool success = false;
    omnetpp::opp_string deploymentId;
    omnetpp::opp_string errorMessage;
    int nfviNodeId = 0;

  private:
    void copy(const VnfDeploymentResponse& other);

  protected:
    bool operator==(const VnfDeploymentResponse&) = delete;

  public:
    VnfDeploymentResponse(const char *name=nullptr, short kind=0);
    VnfDeploymentResponse(const VnfDeploymentResponse& other);
    virtual ~VnfDeploymentResponse();
    VnfDeploymentResponse& operator=(const VnfDeploymentResponse& other);
    virtual VnfDeploymentResponse *dup() const override {return new VnfDeploymentResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getRequestId() const;
    virtual void setRequestId(int requestId);

    virtual bool getSuccess() const;
    virtual void setSuccess(bool success);

    virtual const char * getDeploymentId() const;
    virtual void setDeploymentId(const char * deploymentId);

    virtual const char * getErrorMessage() const;
    virtual void setErrorMessage(const char * errorMessage);

    virtual int getNfviNodeId() const;
    virtual void setNfviNodeId(int nfviNodeId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VnfDeploymentResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VnfDeploymentResponse& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline NfvMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<NfvMessage*>(ptr.get<cObject>()); }
template<> inline VnfDeploymentRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<VnfDeploymentRequest*>(ptr.get<cObject>()); }
template<> inline VnfDeploymentResponse *fromAnyPtr(any_ptr ptr) { return check_and_cast<VnfDeploymentResponse*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __NFVMESSAGES_M_H

