//
// Generated file, do not edit! Created by opp_msgtool 6.1 from nfvMessages.msg.
//

#ifndef __NFVMESSAGES_M_H
#define __NFVMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class NfvMessage;
class VnfDeploymentRequest;
class VnfDeploymentResponse;
/**
 * Class generated from <tt>nfvMessages.msg:15</tt> by opp_msgtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * packet NfvMessage
 * {
 * }
 * </pre>
 */
class NfvMessage : public ::omnetpp::cPacket
{
  protected:

  private:
    void copy(const NfvMessage& other);

  protected:
    bool operator==(const NfvMessage&) = delete;

  public:
    NfvMessage(const char *name=nullptr, short kind=0);
    NfvMessage(const NfvMessage& other);
    virtual ~NfvMessage();
    NfvMessage& operator=(const NfvMessage& other);
    virtual NfvMessage *dup() const override {return new NfvMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NfvMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NfvMessage& obj) {obj.parsimUnpack(b);}

/**
 * Enum generated from <tt>nfvMessages.msg:17</tt> by opp_msgtool.
 * <pre>
 * // Define VNF types using an enum for clarity
 * enum VnfType
 * {
 *     VNF_TYPE_UNKNOWN = 0;
 *     VNF_TYPE_FIREWALL = 1;
 *     VNF_TYPE_LOADBALANCER = 2;
 *     VNF_TYPE_SERVER = 3;
 * }
 * </pre>
 */
enum VnfType {
    VNF_TYPE_UNKNOWN = 0,
    VNF_TYPE_FIREWALL = 1,
    VNF_TYPE_LOADBALANCER = 2,
    VNF_TYPE_SERVER = 3
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VnfType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VnfType& e) { int n; b->unpack(n); e = static_cast<VnfType>(n); }

/**
 * Class generated from <tt>nfvMessages.msg:24</tt> by opp_msgtool.
 * <pre>
 * packet VnfDeploymentRequest extends NfvMessage
 * {
 *     string vnfName; // Name for the VNF instance (e.g., "myFirewall1")
 *     VnfType vnfType; // New: The type of VNF to deploy (e.g., VNF_TYPE_FIREWALL)
 *     int requestId;
 *     // Resource requests (existing fields)
 *     double cpuRequest;
 *     double memoryRequest;
 *     double bandwidthRequest;
 * 
 *     // New: IP address assigned to this VNF instance
 *     int vnfIpAddress;
 * 
 *     // New: VNF-specific parameters (used conditionally based on vnfType)
 *     // For Firewall: the IP of the Load Balancer it should forward to
 *     int firewallLbVip = 0; // Initialize to 0, only relevant for Firewall
 * 
 *     // For LoadBalancer: the array of backend WebServerVNF IPs it manages
 *     int backendServerIps[]; // This will be set for LoadBalancer deployments
 * }
 * </pre>
 */
class VnfDeploymentRequest : public ::NfvMessage
{
  protected:
    omnetpp::opp_string vnfName;
    VnfType vnfType = static_cast<VnfType>(-1);
    int requestId = 0;
    double cpuRequest = 0;
    double memoryRequest = 0;
    double bandwidthRequest = 0;
    int vnfIpAddress = 0;
    int firewallLbVip = 0;
    int *backendServerIps = nullptr;
    size_t backendServerIps_arraysize = 0;

  private:
    void copy(const VnfDeploymentRequest& other);

  protected:
    bool operator==(const VnfDeploymentRequest&) = delete;

  public:
    VnfDeploymentRequest(const char *name=nullptr, short kind=0);
    VnfDeploymentRequest(const VnfDeploymentRequest& other);
    virtual ~VnfDeploymentRequest();
    VnfDeploymentRequest& operator=(const VnfDeploymentRequest& other);
    virtual VnfDeploymentRequest *dup() const override {return new VnfDeploymentRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getVnfName() const;
    virtual void setVnfName(const char * vnfName);

    virtual VnfType getVnfType() const;
    virtual void setVnfType(VnfType vnfType);

    virtual int getRequestId() const;
    virtual void setRequestId(int requestId);

    virtual double getCpuRequest() const;
    virtual void setCpuRequest(double cpuRequest);

    virtual double getMemoryRequest() const;
    virtual void setMemoryRequest(double memoryRequest);

    virtual double getBandwidthRequest() const;
    virtual void setBandwidthRequest(double bandwidthRequest);

    virtual int getVnfIpAddress() const;
    virtual void setVnfIpAddress(int vnfIpAddress);

    virtual int getFirewallLbVip() const;
    virtual void setFirewallLbVip(int firewallLbVip);

    virtual void setBackendServerIpsArraySize(size_t size);
    virtual size_t getBackendServerIpsArraySize() const;
    virtual int getBackendServerIps(size_t k) const;
    virtual void setBackendServerIps(size_t k, int backendServerIps);
    virtual void insertBackendServerIps(size_t k, int backendServerIps);
    [[deprecated]] void insertBackendServerIps(int backendServerIps) {appendBackendServerIps(backendServerIps);}
    virtual void appendBackendServerIps(int backendServerIps);
    virtual void eraseBackendServerIps(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VnfDeploymentRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VnfDeploymentRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nfvMessages.msg:44</tt> by opp_msgtool.
 * <pre>
 * packet VnfDeploymentResponse extends NfvMessage
 * {
 *     int requestId; // reference to original request
 *     bool success;
 *     string vnfName;
 *     string infoMessage;
 *     int deployedVnfIp;
 * 
 * }
 * </pre>
 */
class VnfDeploymentResponse : public ::NfvMessage
{
  protected:
    int requestId = 0;
    bool success = false;
    omnetpp::opp_string vnfName;
    omnetpp::opp_string infoMessage;
    int deployedVnfIp = 0;

  private:
    void copy(const VnfDeploymentResponse& other);

  protected:
    bool operator==(const VnfDeploymentResponse&) = delete;

  public:
    VnfDeploymentResponse(const char *name=nullptr, short kind=0);
    VnfDeploymentResponse(const VnfDeploymentResponse& other);
    virtual ~VnfDeploymentResponse();
    VnfDeploymentResponse& operator=(const VnfDeploymentResponse& other);
    virtual VnfDeploymentResponse *dup() const override {return new VnfDeploymentResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getRequestId() const;
    virtual void setRequestId(int requestId);

    virtual bool getSuccess() const;
    virtual void setSuccess(bool success);

    virtual const char * getVnfName() const;
    virtual void setVnfName(const char * vnfName);

    virtual const char * getInfoMessage() const;
    virtual void setInfoMessage(const char * infoMessage);

    virtual int getDeployedVnfIp() const;
    virtual void setDeployedVnfIp(int deployedVnfIp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VnfDeploymentResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VnfDeploymentResponse& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline NfvMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<NfvMessage*>(ptr.get<cObject>()); }
template<> inline VnfDeploymentRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<VnfDeploymentRequest*>(ptr.get<cObject>()); }
template<> inline VnfDeploymentResponse *fromAnyPtr(any_ptr ptr) { return check_and_cast<VnfDeploymentResponse*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __NFVMESSAGES_M_H

