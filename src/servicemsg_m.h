//
// Generated file, do not edit! Created by opp_msgtool 6.1 from servicemsg.msg.
//

#ifndef __SERVICEMSG_M_H
#define __SERVICEMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ServiceMessage;
class ServiceChainRequest;
class ServiceChainAck;
/**
 * Class generated from <tt>servicemsg.msg:2</tt> by opp_msgtool.
 * <pre>
 * // Base message
 * packet ServiceMessage
 * {
 * }
 * </pre>
 */
class ServiceMessage : public ::omnetpp::cPacket
{
  protected:

  private:
    void copy(const ServiceMessage& other);

  protected:
    bool operator==(const ServiceMessage&) = delete;

  public:
    ServiceMessage(const char *name=nullptr, short kind=0);
    ServiceMessage(const ServiceMessage& other);
    virtual ~ServiceMessage();
    ServiceMessage& operator=(const ServiceMessage& other);
    virtual ServiceMessage *dup() const override {return new ServiceMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ServiceMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ServiceMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>servicemsg.msg:5</tt> by opp_msgtool.
 * <pre>
 * // ServiceChainRequest extends ServiceMessage
 * packet ServiceChainRequest extends ServiceMessage
 * {
 *     int enterpriseId;             // ID of tenant
 *     string chainType;             // E.g., "Firewall->LB->Server"
 *     int desiredServerCount;       // Number of servers requested
 * }
 * </pre>
 */
class ServiceChainRequest : public ::ServiceMessage
{
  protected:
    int enterpriseId = 0;
    omnetpp::opp_string chainType;
    int desiredServerCount = 0;

  private:
    void copy(const ServiceChainRequest& other);

  protected:
    bool operator==(const ServiceChainRequest&) = delete;

  public:
    ServiceChainRequest(const char *name=nullptr, short kind=0);
    ServiceChainRequest(const ServiceChainRequest& other);
    virtual ~ServiceChainRequest();
    ServiceChainRequest& operator=(const ServiceChainRequest& other);
    virtual ServiceChainRequest *dup() const override {return new ServiceChainRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getEnterpriseId() const;
    virtual void setEnterpriseId(int enterpriseId);

    virtual const char * getChainType() const;
    virtual void setChainType(const char * chainType);

    virtual int getDesiredServerCount() const;
    virtual void setDesiredServerCount(int desiredServerCount);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ServiceChainRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ServiceChainRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>servicemsg.msg:12</tt> by opp_msgtool.
 * <pre>
 * // ServiceChainAck extends ServiceMessage
 * packet ServiceChainAck extends ServiceMessage
 * {
 *     int enterpriseId;
 *     int nfviNodeId;
 *     bool success;
 *     string messageinfo;               // Optional info or error message
 * }
 * </pre>
 */
class ServiceChainAck : public ::ServiceMessage
{
  protected:
    int enterpriseId = 0;
    int nfviNodeId = 0;
    bool success = false;
    omnetpp::opp_string messageinfo;

  private:
    void copy(const ServiceChainAck& other);

  protected:
    bool operator==(const ServiceChainAck&) = delete;

  public:
    ServiceChainAck(const char *name=nullptr, short kind=0);
    ServiceChainAck(const ServiceChainAck& other);
    virtual ~ServiceChainAck();
    ServiceChainAck& operator=(const ServiceChainAck& other);
    virtual ServiceChainAck *dup() const override {return new ServiceChainAck(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getEnterpriseId() const;
    virtual void setEnterpriseId(int enterpriseId);

    virtual int getNfviNodeId() const;
    virtual void setNfviNodeId(int nfviNodeId);

    virtual bool getSuccess() const;
    virtual void setSuccess(bool success);

    virtual const char * getMessageinfo() const;
    virtual void setMessageinfo(const char * messageinfo);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ServiceChainAck& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ServiceChainAck& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline ServiceMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<ServiceMessage*>(ptr.get<cObject>()); }
template<> inline ServiceChainRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<ServiceChainRequest*>(ptr.get<cObject>()); }
template<> inline ServiceChainAck *fromAnyPtr(any_ptr ptr) { return check_and_cast<ServiceChainAck*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SERVICEMSG_M_H

